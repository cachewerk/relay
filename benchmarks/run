#!/usr/bin/env php
<?php

namespace CacheWerk\Relay\Benchmarks;

function printBenchmarkFiles(): void {
    foreach (glob(__DIR__ . '/Benchmark*.php') as $file) {
        fprintf(STDERR, "  %s\n", basename($file));
    }
}

function printUsage(string $script): void {
    $usage = <<<EOT
Usage: php $script [options] [--] [<file>...]

Options:
    -h, --host        Specifies the host to connect to. Defaults to '127.0.0.1'.
    -p, --port        Specifies the port to connect to. Defaults to 6379.
    -a, --auth        Specifies the authentication credentials.
        --workers     Specifies the number of worker threads. Defaults to 1.
        --duration    Specifies the duration of the test in seconds. Defaults to 1.0.
        --runs        Specifies the number of test runs. Defaults to 5 for a single worker, 1 for multiple workers.
        --filter      Specifies a filter to apply to the test.  For example "--filter '^Relay$'" to only run Relay benchmarks.
        --json        Output results in json instead of a table.
    -v, --verbose     Enables verbose output.
        --warmup      Specifies the warmup duration in seconds. Defaults to 1.
    -h, --help        Prints this help message.

Arguments:
    <file>            One or more filenames to process.

EOT;

    fprintf(STDERR, $usage);

    fprintf(STDERR, "\nAvailable files:\n\n");
    printBenchmarkFiles();
}


ini_set('display_errors', 1);
error_reporting(E_ALL);

require __DIR__ . '/../vendor/autoload.php';

$opt = getopt(
    'h:p:s:a:v',
    ['host:', 'port:', 'verbose', 'workers:', 'filter:', 'duration:', 'runs:', 'warmup:', 'json', 'help'],
    $optind
);

$host = $opt['h'] ?? $opt['host'] ?? '127.0.0.1';
$port = $opt['p'] ?? $opt['port'] ?? 6379;
$auth = $opt['a'] ?? $opt['auth'] ?? NULL;
$workers = (int)($opt['workers'] ?? 1);
$duration = $opt['duration'] ?? 1.0;
$runs = $opt['runs'] ?? ($workers < 2 ? 5 : 1);
$filter = strtolower(trim($opt['filter'] ?? ''));
$verbose = isset($opt['v']) || isset($opt['verbose']);
$warmup = $opt['warmup'] ?? 1;
$json = isset($opt['json']);

if (isset($opt['help'])) {
    printUsage($argv[0]);
    exit(0);
}

array_splice($argv, 0, $optind);

$benchmarks = array_map(function ($file) {
    if (is_readable(__DIR__ . '/' . basename($file))) {
        return 'CacheWerk\\Relay\\Benchmarks\\' . substr(str_replace(__DIR__ . '/', '', $file), 0, -4);
    }

    throw new \InvalidArgumentException('Unable to read file ' . __DIR__ . '/' . $file);
}, empty($argv) ? glob(__DIR__ . '/Benchmark*.php') : $argv);

try {
    if ($workers > 1) {
        $runner = new Support\ConcurrentRunner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter, $workers
        );
    } else {
        $runner = new Support\Runner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter
        );
    }

    if ($json) {
        $reporter = new Support\JsonReporter($verbose);
    } else {
        $reporter = new Support\CliReporter($verbose);
    }

    $runner->run($benchmarks, $reporter);
} catch (\Exception $exception) {
    fprintf(STDERR, "\n\033[41m ERROR \033[0m {$exception->getMessage()}\n");
}

// TODO: Mention this is SINGLE core SINGLE worker...
// TODO: Can we track Redis CPU usage?
// TODO: OCP compression + batching...
// https://github.com/sharkdp/hyperfine
