#!/usr/bin/env php
<?php

ini_set('display_errors', 1);
error_reporting(E_ALL);

require __DIR__ . '/../vendor/autoload.php';

$opt = getopt('h:p:s:a:v', ['host:', 'port:', 'verbose', 'workers:', 'filter:', 'duration:', 'runs:', 'warmup:'], $optind);

$host = $opt['h'] ?? $opt['host'] ?? '127.0.0.1';
$port = $opt['p'] ?? $opt['port'] ?? 6379;
$auth = $opt['a'] ?? $opt['auth'] ?? NULL;
$workers = (int)($opt['workers'] ?? 1);
$duration = $opt['duration'] ?? 1.0;
$runs = $opt['runs'] ?? ($workers < 2 ? 5 : 1);
$filter = strtolower(trim($opt['filter'] ?? ''));
$verbose = isset($opt['v']) || isset($opt['verbose']);
$warmup = $opt['warmup'] ?? 1;

array_splice($argv, 0, $optind);

$benchmarks = array_map(function ($file) {
    if (is_readable(__DIR__ . '/' . basename($file))) {
        return 'CacheWerk\\Relay\\Benchmarks\\' . substr(str_replace(__DIR__ . '/', '', $file), 0, -4);
    }

    throw new InvalidArgumentException('Unable to read file ' . __DIR__ . '/' . $file);
}, empty($argv) ? glob(__DIR__ . '/Benchmark*.php') : $argv);

try {
    if ($workers > 1) {
        $runner = new CacheWerk\Relay\Benchmarks\Support\ConcurrentRunner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter, $verbose, $workers
        );
    } else {
        $runner = new CacheWerk\Relay\Benchmarks\Support\Runner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter, $verbose
        );
    }

    $runner->run($benchmarks);
} catch (\Exception $exception) {
    printf("\n\033[41m ERROR \033[0m {$exception->getMessage()}\n");
}

// TODO: Mention this is SINGLE core SINGLE worker...
// TODO: Can we track Redis CPU usage?
// TODO: OCP compression + batching...
// https://github.com/sharkdp/hyperfine
