#!/usr/bin/env php
<?php


namespace CacheWerk\Relay\Benchmarks;

ini_set('display_errors', 1);
error_reporting(E_ALL);

require __DIR__ . '/helpers.php';
require __DIR__ . '/../vendor/autoload.php';

$opt = getopt(
    'h:p:s:a:v',
    [
        'host:', 'port:', 'verbose', 'workers:', 'filter:', 'duration:', 'runs:', 'warmup:',
        'json', 'help', 'user:', 'pass:', 'command-type:', 'key-type:'
    ],
    $optind
);

$host = $opt['h'] ?? $opt['host'] ?? '127.0.0.1';
$port = $opt['p'] ?? $opt['port'] ?? 6379;
$auth = $opt['a'] ?? $opt['auth'] ?? NULL;
$user = $opt['user'] ?? NULL;
$pass = $opt['pass'] ?? NULL;
$cmd_types = getCommandTypes($opt, 'command-type', ['read', 'write']);
$key_types = getKeyTypes($opt, 'key-type', ['all']);
$workers = (int)($opt['workers'] ?? 1);
$duration = $opt['duration'] ?? 1.0;
$runs = $opt['runs'] ?? ($workers < 2 ? 5 : 1);
$filter = strtolower(trim($opt['filter'] ?? ''));
$verbose = isset($opt['v']) || isset($opt['verbose']);
$warmup = $opt['warmup'] ?? 1;
$json = isset($opt['json']);

if (isset($opt['help'])) {
    printUsage($argv[0]);
    exit(0);
}

array_splice($argv, 0, $optind);

$benchmarks = array_map(function ($file) {
    if (is_readable(__DIR__ . '/' . basename($file))) {
        return 'CacheWerk\\Relay\\Benchmarks\\' . substr(str_replace(__DIR__ . '/', '', $file), 0, -4);
    }

    throw new \InvalidArgumentException('Unable to read file ' . __DIR__ . '/' . $file);
}, empty($argv) ? glob(__DIR__ . '/Benchmark*.php') : $argv);

$filter_flags = $cmd_types | $key_types;

$benchmarks = array_filter($benchmarks, function ($v) use ($filter_flags) {
    return ($v::flags() & $filter_flags) == $v::flags();
});

if ($user && $pass) {
    $auth = [$user, $pass];
}

if (strpos($host, '/') !== false) {
    $port = 0;
}

try {
    if ($workers > 1) {
        $runner = new Support\ConcurrentRunner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter, $workers
        );
    } else {
        $runner = new Support\Runner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter
        );
    }

    if ($json) {
        $reporter = new Support\JsonReporter($verbose);
    } else {
        $reporter = new Support\CliReporter($verbose);
    }

    $runner->run($benchmarks, $reporter);
} catch (\Exception $exception) {
    fprintf(STDERR, "\n\033[41m ERROR \033[0m {$exception->getMessage()}\n");
}
