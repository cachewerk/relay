#!/usr/bin/env php
<?php

namespace CacheWerk\Relay\Benchmarks;

ini_set('display_errors', 1);
error_reporting(E_ALL);

if (! extension_loaded('relay')) {
    fprintf(STDERR, "\n\033[41m ERROR \033[0m The `relay` extension is not loaded in this PHP environment.\n");
    exit(1);
}

if (! is_readable(__DIR__ . '/../vendor/autoload.php')) {
    fprintf(STDERR, "\n\033[41m ERROR \033[0m Unable to locate autoloader, please run `composer install`\n");
    exit(1);
}

require __DIR__ . '/../vendor/autoload.php';
require __DIR__ . '/Support/helpers.php';

$short_options = ['h:', 'p:', 's:', 'a:', 'v'];
$long_options = [
    'host:', 'port:', 'verbose', 'workers:', 'filter:', 'duration:', 'runs:', 'warmup:',
    'json', 'help', 'user:', 'pass:', 'command-type:', 'key-type:'
];

$opt = getopt(implode($short_options), $long_options, $optind);

$options = array_reduce(
    array_merge($short_options, $long_options),
    function ($carry, $item) {
        $item = rtrim($item, ':');
        $prefix = strlen($item) > 1 ? '--' : '-';
        $carry[$prefix . $item] = null;
        return $carry;
    },
    ['--' => null]
);

for ($i = 1; $i < $optind; ++$i) {
    if (str_starts_with($argv[$i], '-') && ! array_key_exists($argv[$i], $options)) {
        fprintf(STDERR, "\n\033[41m ERROR \033[0m Unknown option '{$argv[$i]}'.\n");
        exit(1);
    }
}

$host = $opt['h'] ?? $opt['host'] ?? '127.0.0.1';
$port = $opt['p'] ?? $opt['port'] ?? 6379;
$auth = $opt['a'] ?? $opt['auth'] ?? null;
$user = $opt['user'] ?? null;
$pass = $opt['pass'] ?? null;

$key_types = getKeyTypes($opt, 'key-type', ['all']);
$cmd_types = getCommandTypes($opt, 'command-type', ['default']);

$threads = Support\System::cpu()->threads;
$workers = (int) ($opt['workers'] ?? max(1, $threads - 2));

$duration = $opt['duration'] ?? 1.0;
$runs = $opt['runs'] ?? ($workers < 2 ? 5 : 2);
$warmup = $opt['warmup'] ?? 1;

$filter = strtolower(trim($opt['filter'] ?? ''));
$verbose = isset($opt['v']) || isset($opt['verbose']);
$json = isset($opt['json']);

if (isset($opt['help'])) {
    printUsage($argv[0]);

    exit(0);
}

array_splice($argv, 0, $optind);

$benchmarks = array_map(function ($file) {
    if (is_readable(__DIR__ . '/Cases/' . basename($file))) {
        return 'CacheWerk\\Relay\\Benchmarks\\Cases\\' . substr(str_replace(__DIR__ . '/Cases/', '', basename($file)), 0, -4);
    }

    throw new \InvalidArgumentException('Unable to read file ' . __DIR__ . '/' . $file);
}, empty($argv) ? glob(__DIR__ . '/Cases/Benchmark*.php') : $argv);

$filter_flags = count($argv) ? Support\Benchmark::ALL : $cmd_types | $key_types;

$benchmarks = array_filter($benchmarks, function ($v) use ($filter_flags) {
    if (($filter_flags & Support\Benchmark::DEFAULT)) {
        return $v::flags() & Support\Benchmark::DEFAULT;
    }

    $bench_flags = $v::flags() & ~(Support\Benchmark::DEFAULT);

    return ($bench_flags & $filter_flags) == $bench_flags;
});

if ($user && $pass) {
    $auth = [$user, $pass];
}

if (strpos($host, '/') !== false) {
    $port = 0;
}

try {
    if ($workers > 1) {
        $runner = new Support\ConcurrentRunner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter, $workers
        );
    } else {
        $runner = new Support\Runner(
            $host, $port, $auth, $runs, $duration, $warmup, $filter
        );
    }

    if ($json) {
        $reporter = new Support\JsonReporter($verbose);
    } else {
        $reporter = new Support\CliReporter($verbose);
    }

    $runner->run($benchmarks, $reporter);
} catch (\Exception $exception) {
    fprintf(STDERR, "\n\033[41m ERROR \033[0m {$exception->getMessage()}\n");
}
